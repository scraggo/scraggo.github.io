{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/PostsList.js"],"names":["data","title","PostsList","category","postData","allMarkdownRemark","edges","posts","filter","categoryFilter","className","length","map","node","id","fields","frontmatter","excerpt","url","slug","key","to","date","getFormattedCategories","getFormattedTags","tag","dangerouslySetInnerHTML","__html","description","props","query","render"],"mappings":"mu2BAAA,oEAMe,wBAAGA,KAAH,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAAC,IAAD,CAAWA,MAAM,W,2GCEfC,EAAY,SAAC,GAA+B,IAA7BF,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,SAAUF,EAAY,EAAZA,MACnC,IAAKD,EACH,OAAO,KAGT,IAAMI,EAAWJ,EAAKK,kBAAkBC,MAClCC,EAAQJ,EAAWC,EAASI,OAAOC,YAAeN,IAAaC,EAErE,OACE,yBAAKM,UAAU,cACb,yBAAKA,UAAU,kBACb,4BAAKT,EAAL,WACA,kCAAQM,EAAMI,OAAd,MAEDJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAAqCD,EAArCC,GAAIC,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,YAAaC,EAAYJ,EAAZI,QAC3BC,EAAMH,EAAOI,KAEnB,OACE,6BAASC,IAAKN,EAAIJ,UAAU,gBAC1B,4BAAQA,UAAU,cAChB,4BACE,kBAAC,OAAD,CAAMW,GAAIH,GAAMF,EAAYf,SAGhC,kBAAC,OAAD,CAAMoB,GAAIH,GACR,yBAAKR,UAAU,gBACb,8BAAOM,EAAYM,KAAnB,OACA,0BAAMZ,UAAU,mBACba,YAAuBP,IAEzBQ,YAAiBR,GAAaJ,KAAI,SAAAa,GAAG,OACpC,0BAAMf,UAAU,YAAYe,OAGhC,iCACE,uBACEf,UAAU,eACVgB,wBAAyB,CACvBC,OAAQX,EAAYY,aAAeX,aAyCxC,aAAAY,GAAK,OAClB,kBAAC,cAAD,CACEC,MA/BO,aAgCPC,OAAQ,SAAA/B,GAAI,OAAI,kBAACE,EAAD,eAAWF,KAAMA,GAAU6B,KAF7C","file":"component---src-pages-index-js-519548ca9421f7804ef1.js","sourcesContent":["import React from 'react';\n// import { Link, graphql } from 'gatsby';\nimport Layout from 'src/components/Layout';\nimport PostsList from 'src/components/PostsList';\nimport SEO from 'src/components/SEO';\n\nexport default ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <PostsList title=\"All\" />\n  </Layout>\n);\n","import React from 'react';\nimport { Link, graphql, StaticQuery } from 'gatsby';\n\nimport {\n  categoryFilter,\n  getFormattedCategories,\n  getFormattedTags,\n} from 'src/utils/dataUtils';\n\n/** posts -> already filtered edges */\n/** totalCount -> data.allMarkdownRemark.totalCount */\nconst PostsList = ({ data, category, title }) => {\n  if (!data) {\n    return null;\n  }\n\n  const postData = data.allMarkdownRemark.edges;\n  const posts = category ? postData.filter(categoryFilter(category)) : postData;\n\n  return (\n    <div className=\"posts-list\">\n      <div className=\"posts-category\">\n        <h2>{title} Posts </h2>\n        <span>({posts.length})</span>\n      </div>\n      {posts.map(({ node }) => {\n        const { id, fields, frontmatter, excerpt } = node;\n        const url = fields.slug;\n\n        return (\n          <article key={id} className=\"post-wrapper\">\n            <header className=\"post-title\">\n              <h3>\n                <Link to={url}>{frontmatter.title}</Link>\n              </h3>\n            </header>\n            <Link to={url}>\n              <div className=\"post-info-sm\">\n                <span>{frontmatter.date} | </span>\n                <span className=\"post-categories\">\n                  {getFormattedCategories(frontmatter)}\n                </span>\n                {getFormattedTags(frontmatter).map(tag => (\n                  <span className=\"post-tag\">{tag}</span>\n                ))}\n              </div>\n              <section>\n                <p\n                  className=\"post-excerpt\"\n                  dangerouslySetInnerHTML={{\n                    __html: frontmatter.description || excerpt,\n                  }}\n                />\n              </section>\n            </Link>\n          </article>\n        );\n      })}\n    </div>\n  );\n};\n\nconst query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: \"post\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            categories\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            title\n            type\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 400)\n        }\n      }\n    }\n  }\n`;\n\nexport default props => (\n  <StaticQuery\n    query={query}\n    render={data => <PostsList data={data} {...props} />}\n  />\n);\n"],"sourceRoot":""}