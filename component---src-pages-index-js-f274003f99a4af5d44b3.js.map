{"version":3,"sources":["webpack:///./node_modules/lodash/words.js","webpack:///./src/utils/dataUtils.js","webpack:///./node_modules/lodash/_unicodeWords.js","webpack:///./node_modules/lodash/kebabCase.js","webpack:///./src/pages/index.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./src/components/PostsList.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./src/components/TagLink.js","webpack:///./node_modules/lodash/_createCompounder.js"],"names":["asciiWords","hasUnicodeWord","toString","unicodeWords","module","exports","string","pattern","guard","undefined","match","categoryFilter","category","data","node","frontmatter","categories","includes","getFormattedCategories","map","capitalizeWords","join","getImage","filename","sizingStrategy","found","allFile","edges","find","image","relativePath","endsWith","childImageSharp","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsMiscLower","rsMiscUpper","reOptMod","rsModifier","rsSeq","rsEmoji","reUnicodeWord","RegExp","kebabCase","createCompounder","result","word","index","toLowerCase","title","reAsciiWord","PostsList","postData","allMarkdownRemark","posts","filter","className","length","id","fields","excerpt","tags","url","slug","key","to","date","tag","text","variant","dangerouslySetInnerHTML","__html","description","props","query","render","reHasUnicodeWord","test","contentMap","post","count","postList","TagLink","capText","contentFunc","Error","arrayReduce","deburr","words","reApos","callback","replace"],"mappings":"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","file":"component---src-pages-index-js-f274003f99a4af5d44b3.js","sourcesContent":["require(\"core-js/modules/es6.regexp.match\");\n\nvar asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\n\n\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;","import { capitalizeWords } from 'src/utils/stringUtils';\n\n/**\n * Get a filter callback for category\n * @param {string} category\n * @returns {function} filter\n */\nexport const categoryFilter = category => data =>\n  data.node.frontmatter.categories.includes(category);\n\nexport const getFormattedCategories = frontmatter => {\n  const { categories } = frontmatter;\n  return categories\n    ? categories.map(capitalizeWords).join(', ')\n    : 'Uncategorized';\n};\n\n/**\n * Get image data from graphQl query\n * @param {object} config\n * @param {object} config.data -> the graphQl query result\n * @param {string} config.filename\n * @param {string} config.sizingStrategy -> oneOf('fixed', 'fluid')\n * @returns {object|undefined}\n */\nexport const getImage = ({ data, filename, sizingStrategy }) => {\n  // data.allFile.edges -> array\n  // data.allFile.edges[0].node.relativePath -> tech-projects/filename\n  // data.allFile.edges[0].node.childImageSharp.fluid -> object base 64\n  const found = data.allFile.edges.find(image =>\n    image.node.relativePath.endsWith(filename)\n  );\n  if (found) {\n    return found.node.childImageSharp[sizingStrategy];\n  }\n};\n","require(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = \"\\\\u2700-\\\\u27bf\",\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = \"\\\\u2000-\\\\u206f\",\n    rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\",\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n/** Used to compose unicode capture groups. */\n\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n    rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */\n\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n/** Used to match complex or compound words. */\n\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;","var createCompounder = require('./_createCompounder');\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\n\n\nvar kebabCase = createCompounder(function (result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\nmodule.exports = kebabCase;","import React from 'react';\n// import { Link, graphql } from 'gatsby';\nimport Layout from 'src/components/Layout';\nimport PostsList from 'src/components/PostsList';\nimport SEO from 'src/components/SEO';\n\nexport default ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <PostsList title=\"All\" />\n  </Layout>\n);\n","require(\"core-js/modules/es6.regexp.match\");\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;","import React from 'react';\nimport { Link, graphql, StaticQuery } from 'gatsby';\n\nimport TagLink from 'src/components/TagLink';\nimport { categoryFilter, getFormattedCategories } from 'src/utils/dataUtils';\n\n/** posts -> already filtered edges */\n/** totalCount -> data.allMarkdownRemark.totalCount */\nconst PostsList = ({ data, category, title }) => {\n  if (!data) {\n    return null;\n  }\n\n  const postData = data.allMarkdownRemark.edges;\n  const posts = category ? postData.filter(categoryFilter(category)) : postData;\n\n  return (\n    <div className=\"posts-list\">\n      <div className=\"posts-category\">\n        <h2>{title} Posts </h2>\n        <span>({posts.length})</span>\n      </div>\n      {posts.map(({ node }) => {\n        const { id, fields, frontmatter, excerpt } = node;\n        const tags = frontmatter.tags || [];\n        const url = fields.slug;\n\n        return (\n          <article key={id} className=\"post-wrapper\">\n            <header className=\"post-title\">\n              <h3>\n                <Link to={url}>{frontmatter.title}</Link>\n              </h3>\n            </header>\n            <div className=\"post-info-sm\">\n              <Link to={url}>\n                <span>{frontmatter.date} | </span>\n              </Link>\n              <span className=\"post-categories\">\n                {getFormattedCategories(frontmatter)}\n              </span>\n              {tags.map(tag => (\n                <TagLink key={tag} text={tag} variant=\"postList\" />\n              ))}\n            </div>\n            <Link to={url}>\n              <section>\n                <p\n                  className=\"post-excerpt\"\n                  dangerouslySetInnerHTML={{\n                    __html: frontmatter.description || excerpt,\n                  }}\n                />\n              </section>\n            </Link>\n          </article>\n        );\n      })}\n    </div>\n  );\n};\n\nconst query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: \"post\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            categories\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            title\n            type\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 400)\n        }\n      }\n    }\n  }\n`;\n\nexport default props => (\n  <StaticQuery\n    query={query}\n    render={data => <PostsList data={data} {...props} />}\n  />\n);\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\n\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;","import React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport { Link } from 'gatsby';\n\nimport { capitalizeWords } from 'src/utils/stringUtils';\n\nconst contentMap = {\n  post: ({ text }) => <span className=\"post-info-sm post-tag\">{text}</span>,\n  count: ({ count, text }) => <span>{`${text} (${count})`}</span>,\n  postList: ({ text }) => <span className=\"post-tag\">{text}</span>,\n};\n\nconst TagLink = ({ count, text, variant }) => {\n  const capText = capitalizeWords(text);\n  const contentFunc = contentMap[variant];\n\n  if (!contentFunc) {\n    throw new Error(`props.variant ${variant} not in contentMap.`);\n  }\n\n  return (\n    <Link to={`/tags/${kebabCase(text)}/`}>\n      {contentFunc({ count, text: capText })}\n    </Link>\n  );\n};\n\nexport default TagLink;\n","require(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nvar arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n/** Used to compose unicode capture groups. */\n\n\nvar rsApos = \"['\\u2019]\";\n/** Used to match apostrophes. */\n\nvar reApos = RegExp(rsApos, 'g');\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\n\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;"],"sourceRoot":""}