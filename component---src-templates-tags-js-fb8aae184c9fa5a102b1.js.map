{"version":3,"sources":["webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./src/templates/tags.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./src/utils/stringUtils.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_castSlice.js"],"names":["rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","join","rsSymbol","reUnicode","RegExp","module","exports","string","match","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","undefined","chr","charAt","trailing","slice","upperFirst","toLowerCase","asciiToArray","unicodeToArray","Tags","_ref","pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","capitalizeWords","React","createElement","Layout","map","_ref2","node","slug","fields","title","frontmatter","key","Link","to","split","specialWords","ava","javascript","oop","typescript","word","length","lowerCased","w","capitalize","createCaseFirst","baseSlice","array","start","end"],"mappings":"+EACA,IAQIA,EAAW,oBACXC,EAAU,kDACVC,EAAS,2BAETC,EAAc,qBACdC,EAAa,kCACbC,EAAa,qCAIbC,EAPa,MAAQL,EAAU,IAAMC,EAAS,IAOtB,IAGxBK,EAFW,oBAEQD,GADP,gBAAwB,CAACH,EAAaC,EAAYC,GAAYG,KAAK,KAAnE,qBAA2FF,EAAW,MAElHG,EAAW,MAAQ,CAACN,EAAcF,EAAU,IAAKA,EAASG,EAAYC,EAAYL,GAAUQ,KAAK,KAAO,IAGxGE,EAAYC,OAAOT,EAAS,MAAQA,EAAS,KAAOO,EAAWF,EAAO,KAa1EK,EAAOC,QAJP,SAAwBC,GACtB,OAAOA,EAAOC,MAAML,IAAc,K,uBCpCpC,IAAIM,EAAY,EAAQ,QACpBC,EAAa,EAAQ,QACrBC,EAAgB,EAAQ,QACxBC,EAAW,EAAQ,QA6BvBP,EAAOC,QApBP,SAAyBO,GACvB,OAAO,SAASN,GACdA,EAASK,EAASL,GAElB,IAAIO,EAAaJ,EAAWH,GACxBI,EAAcJ,QACdQ,EAEAC,EAAMF,EACNA,EAAW,GACXP,EAAOU,OAAO,GAEdC,EAAWJ,EACXL,EAAUK,EAAY,GAAGb,KAAK,IAC9BM,EAAOY,MAAM,GAEjB,OAAOH,EAAIH,KAAgBK,K,uBC5B/B,IAAIN,EAAW,EAAQ,QACnBQ,EAAa,EAAQ,QAqBzBf,EAAOC,QAJP,SAAoBC,GAClB,OAAOa,EAAWR,EAASL,GAAQc,iB,qBCnBrC,IAAIC,EAAe,EAAQ,QACvBZ,EAAa,EAAQ,QACrBa,EAAiB,EAAQ,QAe7BlB,EAAOC,QANP,SAAuBC,GACrB,OAAOG,EAAWH,GACdgB,EAAehB,GACfe,EAAaf,K,kCCdnB,oEA2DeiB,UAnDFC,IAA4B,IAA3B,YAAEC,EAAW,KAAEC,GAAMF,EACjC,MAAM,IAAEG,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZG,YAAgBL,GAAI,IAErC,OACEM,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKH,GACLE,IAAAC,cAAA,UACGN,EAAMQ,IAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,GAASD,EAAKE,QAChB,MAAEC,GAAUH,EAAKI,YACvB,OACET,IAAAC,cAAA,MAAIS,IAAKJ,GACPN,IAAAC,cAACU,OAAI,CAACC,GAAIN,GAAOE,OAKzBR,IAAAC,cAACU,OAAI,CAACC,GAAG,SAAQ,gB,mBCnBzBzC,EAAOC,QAJP,SAAsBC,GACpB,OAAOA,EAAOwC,MAAM,M,kCCRtB,2DAEA,MAAMC,EAAe,CACnBC,IAAK,MACLC,WAAY,aACZC,IAAK,MACLC,WAAY,cAGDnB,EAAkB,SAACoB,GAC9B,QADkC,IAAJA,MAAO,IACjCA,EAAKC,OAAS,EAChB,OAAOD,EAGT,MAAME,EAAaF,EAAKhC,cACxB,OAAIkC,KAAcP,EACTA,EAAaO,GAGfF,EACJN,MAAM,KACNV,IAAImB,GAAKC,IAAWD,IACpBvD,KAAK,O,qBCtBV,IAmBImB,EAnBkB,EAAQ,OAmBbsC,CAAgB,eAEjCrD,EAAOC,QAAUc,G,qBCrBjB,IAAIuC,EAAY,EAAQ,QAiBxBtD,EAAOC,QANP,SAAmBsD,EAAOC,EAAOC,GAC/B,IAAIR,EAASM,EAAMN,OAEnB,OADAQ,OAAc/C,IAAR+C,EAAoBR,EAASQ,GAC1BD,GAASC,GAAOR,EAAUM,EAAQD,EAAUC,EAAOC,EAAOC","file":"component---src-templates-tags-js-fb8aae184c9fa5a102b1.js","sourcesContent":["/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from 'src/components/Layout';\nimport { capitalizeWords } from 'src/utils/stringUtils';\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${capitalizeWords(tag)}\"`;\n\n  return (\n    <Layout>\n      <div>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const { slug } = node.fields;\n            const { title } = node.frontmatter;\n            return (\n              <li key={slug}>\n                <Link to={slug}>{title}</Link>\n              </li>\n            );\n          })}\n        </ul>\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  );\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","import capitalize from 'lodash/capitalize';\n\nconst specialWords = {\n  ava: 'AVA',\n  javascript: 'JavaScript',\n  oop: 'OOP',\n  typescript: 'TypeScript',\n};\n\nexport const capitalizeWords = (word = '') => {\n  if (word.length < 1) {\n    return word;\n  }\n\n  const lowerCased = word.toLowerCase();\n  if (lowerCased in specialWords) {\n    return specialWords[lowerCased];\n  }\n\n  return word\n    .split(' ')\n    .map(w => capitalize(w))\n    .join(' ');\n};\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n"],"sourceRoot":""}