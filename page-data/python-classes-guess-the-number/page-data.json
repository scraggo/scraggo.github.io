{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-classes-guess-the-number/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"b9bffa10-76c5-5831-96ad-63365ba582ec","excerpt":"Object-oriented design is a powerful programming paradigm that can be intimidating to anyone trying to learn how to use it. I worked through a number of…","html":"<p>Object-oriented design is a powerful programming paradigm that can be intimidating to anyone trying to learn how to use it. I worked through a number of excellent tutorials and books on the subject, but struggled to apply the concepts to my own code. I decided to convert a working program that <em>didn’t</em> use OOP and wrap it in a single class.</p>\n<p>The program I chose was <a href=\"https://inventwithpython.com/chapter4.html\">Guess the Number</a> written by Al Sweigart for his book Invent Your Own Computer Games with Python. This book is an excellent way to learn Python 3 (and also a fun way!)</p>\n<p>After you’ve looked at the code, you’ll notice that the game doesn’t include any options. It runs only once. There are no functions, only global variables. It does well for its purpose as a program that teaches beginning concepts, but it’s not extendable as-is. You could certainly wrap it all in a single “main” function, then wrap that function in a <code class=\"language-text\">while</code> loop, and that would solve a few problems, but I wanted to go beyond those simple additions.</p>\n<p>The full code for the class-extended program is <a href=\"https://github.com/scraggo/small-projects/blob/master/small-projects-python/number_guess_oop.py\">here</a>. Below, I will explain the additions and changes from adding object-orientation.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> high_num<span class=\"token punctuation\">,</span> myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>high_num <span class=\"token operator\">=</span> high_num          <span class=\"token comment\">#the highest possible number that can be chosen</span>\n        self<span class=\"token punctuation\">.</span>myName <span class=\"token operator\">=</span> myName              <span class=\"token comment\">#the user's name</span>\n        self<span class=\"token punctuation\">.</span>guessesTaken <span class=\"token operator\">=</span> <span class=\"token number\">0</span>             <span class=\"token comment\">#the initial number of guesses taken</span>\n        self<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>high_num<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#the number the computer chooses</span>\n        self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>                 <span class=\"token comment\">#the user's guess</span></code></pre></div>\n<p>To initiate the <code class=\"language-text\">class</code>, we use the <code class=\"language-text\">__init__</code> method. Adding <code class=\"language-text\">high_num</code> and <code class=\"language-text\">myName</code> parameters allowed me to add some configurations to the game. <code class=\"language-text\">high_num</code> allows me to set a game to go up to 20 (as in the original) or lower (to make the game easier) or higher (to make the game more difficult). [I’ll discuss this further when we get to the <code class=\"language-text\">main()</code> block.] A huge advantage from the standpoint of code-organization was being able to set most of the variables in the game at the outset. These include the number of guesses taken, the number that the user tries to guess, and the user’s guess</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_guess</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Take a guess.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># the state of this variable is changed of the class instance!</span>\n                                        <span class=\"token comment\"># see more below.</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not a valid guess.'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p><code class=\"language-text\">get_guess()</code> is one of the two methods in the class. It modifies the <code class=\"language-text\">self.guess</code> if the user inputs an integer, then returns <code class=\"language-text\">True</code>. If not, the function returns <code class=\"language-text\">False</code> after an error message. It doesn’t add a guess to self.guessesTaken.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Well, {},  I am thinking of a number between 1 and {}.'</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>high_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>guessesTaken <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>get_guess<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token comment\"># else: self.guess gets changed in get_guess function</span>\n\n            self<span class=\"token punctuation\">.</span>guessesTaken <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your guess is too low.'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your guess is too high.'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>guess <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good job, {}! You guessed my number in {} guesses!'</span>\n                <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>guessesTaken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nope. The number I was thinking of was'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I find it slightly cumbersome to put <code class=\"language-text\">self</code> in front of so many variables, but it’s only necessary if the variables determine the state of the game. (If I wanted to put a non-state-changing variable in, there’s no need for <code class=\"language-text\">self</code> in front of it, but I wouldn’t be able to access the variable outside of the function.) The great thing about <code class=\"language-text\">self</code> is that you can <em>modify the variable in multiple functions without returning it</em>. This is excellent from a design perspective - there’s no need to pass a parameter from a function return to another function’s input.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello! What is your name?'</span><span class=\"token punctuation\">)</span>\n    myName <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Right on, {}! We've got 2 brands of game here.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Type 1 for easy or 2 for difficult guessing game. Type q to quit.'</span><span class=\"token punctuation\">)</span>\n        user_choice <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> user_choice<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Goodbye!\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            user_choice <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>user_choice<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> user_choice <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">if</span> user_choice <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># make easy game</span>\n            easy_game <span class=\"token operator\">=</span> Game<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> myName<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># play easy game</span>\n            easy_game<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">elif</span> user_choice <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># make difficult game</span>\n            diff_game <span class=\"token operator\">=</span> Game<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> myName<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># play difficult game</span>\n            diff_game<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nHow about another?\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">main()</code> function is the main entry point of the program. We greet the user, get his/her name in <code class=\"language-text\">myName</code>, then give them the choice of an easy or hard game (with the <code class=\"language-text\">user_choice</code> variable). After this, you can see that <code class=\"language-text\">if user_choice == 1</code>, we instantiate an “easy” game with <code class=\"language-text\">easy_game = Game(20, myName)</code>. The hard game is instantiated <code class=\"language-text\">if user_choice == 2</code>, with <code class=\"language-text\">diff_game = Game(30, myName)</code>. Each instance uses the <code class=\"language-text\">play()</code> method to run a single version of the game. The end of the <code class=\"language-text\">main()</code> function displays “How about another?” and the while loop starts over.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># if __name__ == 'main':</span>\n<span class=\"token comment\">#     main()</span>\n\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To run the program, you may choose the commented out module method, or simply use <code class=\"language-text\">main()</code>. Don’t forget to comment out one or the other.</p>\n<h2>More Resources on OOP in Python</h2>\n<p>Some favorite videos / tutorials:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ZDa-Z5JzLYM\">Corey Schafer: Python OOP Tutorial 1: Classes and Instances - YouTube</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=RZntqQgi0gM\">Designing a Python Class - YouTube</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=t8YkjDH86Y4\">Python OOP - Deck of Cards - YouTube</a></li>\n<li><a href=\"http://www.pythonprogramming.in/program-to-demonstrate-the-use-of-class-object-and-module.html\">Python’s Program to demonstrate the use of Class, Object and Module</a></li>\n<li><a href=\"http://www.spronck.net/pythonbook/\">Coder’s Apprentice</a> - see OOP chapters</li>\n</ul>","fields":{"slug":"/python-classes-guess-the-number/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"July 01, 2017","description":null,"tags":["oop","python"],"title":"Using a Class in Python as a Code Wrapper for a Simple Game"}}},"pageContext":{"slug":"/python-classes-guess-the-number/","previous":{"fields":{"slug":"/honing-strengths-with-a-student-evaluation/"},"frontmatter":{"tags":["music education"],"title":"Honing Musical Strengths with a Student Evaluation","type":"post"}},"next":{"fields":{"slug":"/marketable-programming-skills/"},"frontmatter":{"tags":["career"],"title":"Marketable Programming Skills","type":"post"}}}},"staticQueryHashes":["3159585216","63159454"]}