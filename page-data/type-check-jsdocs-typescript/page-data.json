{"componentChunkName":"component---src-templates-blog-post-js","path":"/type-check-jsdocs-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"87a467a5-a5cc-57bc-b828-33199e1396ed","excerpt":"Overview Did you know that you can use TypeScript features in JavaScript projects? When I discovered this and tried it out, I really enjoyed the results. Let’s…","html":"<h2>Overview</h2>\n<p>Did you know that you can use TypeScript features in JavaScript projects? When I discovered this and tried it out, I really enjoyed the results. Let’s go a bit into how it works.</p>\n<p>With a few simple ingredients:</p>\n<ul>\n<li>VSCode</li>\n<li>JavaScript</li>\n<li>Willingness to add types in JSDoc (and optionally importing TypeScript types)</li>\n</ul>\n<p>You can:</p>\n<ul>\n<li>statically check the types of .js files</li>\n<li>run <code class=\"language-text\">tsc</code> compiler on .js files</li>\n<li>\n<p>write types that are compatible with JSDoc</p>\n<ul>\n<li>these include utility types like <code class=\"language-text\">Partial</code>. Example: <code class=\"language-text\">/** @param {Partial&lt;defaults>} options */</code></li>\n</ul>\n</li>\n<li>write TypeScript types in <code class=\"language-text\">.ts.</code> files and import them</li>\n<li>get all of this with minimal effort and code changes</li>\n</ul>\n<p>Limitations:</p>\n<ul>\n<li>advanced TypeScript in JSDoc may not be parse-able by JSDoc</li>\n<li>\n<p>inelegance compared to TypeScript:</p>\n<ul>\n<li>type definitions in JSDoc comments are verbose</li>\n<li>type casting syntax is clumsy. Unlike the JSDoc comments, it sits right inside your code</li>\n</ul>\n</li>\n<li>There isn’t a lot of writing about using JSDoc typings.</li>\n</ul>\n<h2>Configuring</h2>\n<p><code class=\"language-text\">// @ts-check</code> at the top of a .js file</p>\n<ul>\n<li>this on its own is enough! You’ll reap many benefits if JSDoc doc-strings are already in place.</li>\n</ul>\n<p>Instead (or in addition), you can create a <code class=\"language-text\">jsconfig.json</code> or a <code class=\"language-text\">tsconfig.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// true for making types mandatory</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>JSDoc</h2>\n<h3>interfaces with <code class=\"language-text\">@typedef</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * a typical item that can be produced\n * @typedef {Object} Item\n * @property {string} description the item description\n */</span></code></pre></div>\n<p>Use with <code class=\"language-text\">@param</code>, <code class=\"language-text\">@type</code>, etc</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * create new items\n * @param {number} qt quantity of items to be created\n * @returns {Item[]}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">qt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// in TypeScript, this would be</span>\n  <span class=\"token comment\">// const items: Item[] = [];</span>\n\n  <span class=\"token comment\">/** @type Item[] */</span>\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...create and return items</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>extending an interface with <code class=\"language-text\">&amp;</code> (not “official” JSDoc syntax):</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef {Object} Item\n * @property {string} description the item description\n *\n * @typedef {Object} ChildType\n * @property {String} shinyThing\n *\n * @typedef {Item &amp; ChildType} FancyItem\n */</span></code></pre></div>\n<h3>@template</h3>\n<blockquote>\n<p>Now for the craziest thing in JSDoc: you can even do generics.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Takes any object with a name prop and removes it\n * @template T\n * @param {T &amp; {name?: string}} inputObj\n * @returns {Omit&lt;T, 'name'>}\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputObj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** @type {typeof inputObj} */</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<ul>\n<li><a href=\"https://gils-blog.tayar.org/posts/jsdoc-typings-all-the-benefits-none-of-the-drawbacks/#generics\">https://gils-blog.tayar.org/posts/jsdoc-typings-all-the-benefits-none-of-the-drawbacks/#generics</a></li>\n<li><a href=\"https://docs.joshuatz.com/cheatsheets/js/jsdoc/#generics-in-jsdoc\">https://docs.joshuatz.com/cheatsheets/js/jsdoc/#generics-in-jsdoc</a></li>\n</ul>\n<h3>importing jsdoc or .d.ts file</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef { import(\"./models\").Customer } Customer\n */</span>\n\n <span class=\"token comment\">/** @type {Customer} */</span>\n<span class=\"token keyword\">const</span> theCustomer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>When to convert to TypeScript</h2>\n<p>If your codebase is going to be worked on long-term, it’s critical in some way, and your developers know TypeScript, converting to TypeScript is the way to go.</p>\n<p>If you want a quick payoff and type-checking for a small codebase and don’t have the right resources or willingness to do an overhaul, my recommendation is to use JSDoc. It’ll take a little time to learn and set up correctly, but having type safety in JavaScript is exciting!</p>\n<h2>References</h2>\n<p>See <a href=\"https://www.youtube.com/watch?v=xLDVfBUgD8U&#x26;t=114s\">Do TypeScript without TypeScript - Simone Sanfratello | YouTube</a> for a demo. Also see the associated repo: <a href=\"https://github.com/simone-sanfratello/do-typescript-without-typescript\">https://github.com/simone-sanfratello/do-typescript-without-typescript</a>.</p>\n<p>Articles:</p>\n<ul>\n<li><a href=\"https://gils-blog.tayar.org/posts/jsdoc-typings-all-the-benefits-none-of-the-drawbacks/\">https://gils-blog.tayar.org/posts/jsdoc-typings-all-the-benefits-none-of-the-drawbacks/</a></li>\n<li><a href=\"https://docs.joshuatz.com/cheatsheets/js/jsdoc/\">https://docs.joshuatz.com/cheatsheets/js/jsdoc/</a></li>\n<li><a href=\"https://goulet.dev/posts/how-to-write-ts-interfaces-in-jsdoc/\">https://goulet.dev/posts/how-to-write-ts-interfaces-in-jsdoc/</a></li>\n<li><a href=\"https://naruhodo.dev/type-check-your-javascript-with-jsdoc/\">https://naruhodo.dev/type-check-your-javascript-with-jsdoc/</a></li>\n<li><a href=\"https://codewithhugo.com/jsdoc-typescript-typings-types-d-ts/\">How to get type-checking and generate TypeScript Typing declaration (types.d.ts) from JSDoc annotations · Code with Hugo</a> - npm packages including <code class=\"language-text\">jsdoc</code>, <code class=\"language-text\">tsd-jsdoc</code></li>\n</ul>\n<p>Official resources:</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/nodejs/working-with-javascript\">Working with JavaScript in Visual Studio Code</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html\">https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\">https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\">https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html</a></li>\n</ul>","fields":{"slug":"/type-check-jsdocs-typescript/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"December 05, 2021","description":null,"tags":["typescript","javascript"],"title":"TypeScript-lite: JSDoc for type-checking js files"}}},"pageContext":{"slug":"/type-check-jsdocs-typescript/","previous":{"fields":{"slug":"/programming-with-more-ease/"},"frontmatter":{"tags":["career","mental health"],"title":"Programming with more ease","type":"post"}},"next":{"fields":{"slug":"/2022-12-05-random-music-generators-news/"},"frontmatter":{"tags":["random music generators"],"title":"Random Music Generators is now hosted on render.com","type":"post"}}}},"staticQueryHashes":["3159585216","63159454"]}