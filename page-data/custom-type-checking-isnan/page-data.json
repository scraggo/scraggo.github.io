{"componentChunkName":"component---src-templates-blog-post-js","path":"/custom-type-checking-isnan/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"a5528eb3-e30d-5233-bd30-b8c7ae51558c","excerpt":"Javascript is infamous for being “loose” and misleading with its typing.  gives you ,  gives you , etc. So instead of writing conditionals using , doing…","html":"<p>Javascript is infamous for being “loose” and misleading with its typing. <code class=\"language-text\">typeof [1, 2, 3]</code> gives you <code class=\"language-text\">'object'</code>, <code class=\"language-text\">typeof null</code> gives you <code class=\"language-text\">'object'</code>, etc.</p>\n<p>So instead of writing conditionals using <code class=\"language-text\">Array.isArray()</code>, doing specific <code class=\"language-text\">null</code> checks, etc, I decided to make my own wrapper for <code class=\"language-text\">typeof</code> which I called <code class=\"language-text\">getType</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Get typeof item with a few extra types specified.\n * @param {any} item\n * @returns {string} 'array'|'null'|'NaN'| typeof item\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'array'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'null'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'NaN'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I unknowingly put a bug in my app. Can you spot it?</p>\n<p>…</p>\n<p>It’s in the 3rd <code class=\"language-text\">if</code> statement.</p>\n<p>Basically, the function took anything that wasn’t an ‘array’ or ‘null’ and decided it was ‘NaN’! The function never made it to the final return line, so I wasn’t getting ‘object’, ‘string’, ‘number’, etc like I expected.</p>\n<p>When I discovered the issue, I wrote tests. (Yet another example of why tests are important.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getType'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'behaves as expected'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> typesToTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'array'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'object'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token string\">'this is a string'</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'NaN'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'null'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> actual<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'undefined'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">actual</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> <span class=\"token string\">'function'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    typesToTest<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">testObj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actual<span class=\"token punctuation\">,</span> expected <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> testObj<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I discovered two confusing things:</p>\n<ul>\n<li><code class=\"language-text\">typeof NaN</code> gives you <code class=\"language-text\">'number'</code></li>\n<li><code class=\"language-text\">isNaN('NaN')</code>, <code class=\"language-text\">isNaN(undefined)</code>, <code class=\"language-text\">isNaN({})</code>, <code class=\"language-text\">isNaN('blabla')</code> are all <code class=\"language-text\">true</code>!</li>\n</ul>\n<p>I just needed to change one line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'NaN'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Later I discovered the section on <code class=\"language-text\">Number.isNaN</code> in the <a href=\"https://github.com/airbnb/javascript#standard-library\">Airbnb JavaScript Style Guide</a>:</p>\n<p>Verbatim:</p>\n<p>The <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects\">Standard Library</a>\ncontains utilities that are functionally broken but remain for legacy reasons.</p>\n<ul>\n<li><a href=\"#standard-library--isnan\">29.1</a> Use <code class=\"language-text\">Number.isNaN</code> instead of global <code class=\"language-text\">isNaN</code>.</li>\n</ul>\n<p>eslint: <a href=\"https://eslint.org/docs/rules/no-restricted-globals\"><code class=\"language-text\">no-restricted-globals</code></a></p>\n<blockquote>\n<p>Why? The global <code class=\"language-text\">isNaN</code> coerces non-numbers to numbers, returning true for anything that coerces to NaN.\nIf this behavior is desired, make it explicit.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bad</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.2.3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// good</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.2.3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.2.3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Read more:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\">Number.isNaN() - JavaScript | MDN</a></p>\n<p>In light of learning that, I could remove the <code class=\"language-text\">typeof item === 'number'</code> check. Here’s the fully working function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Get typeof item with a few extra types specified.\n * @param {any} item\n * @returns {string} 'array'|'null'|'NaN'| typeof item\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'array'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'null'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'NaN'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Short and sweet!</p>\n<p>One way to use <code class=\"language-text\">getType</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> thing <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> thingType <span class=\"token operator\">=</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'array'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>thingType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runAwesomeProcess</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bad input: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>thing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Expected array, object, or number, got '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>thingType<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compare that to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// if thing is not falsy (null check) and typeof thing is object (array or object)</span>\n<span class=\"token comment\">//    or thing is a number that isn't NaN</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>thing <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> thing <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> thing <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runAwesomeProcess</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bad input: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>thing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Expected array, object, or number, got '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> thing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/custom-type-checking-isnan/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 22, 2019","description":null,"tags":["javascript"],"title":"Custom type checking - isNaN vs Number.isNaN"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/custom-type-checking-isnan/","previous":{"fields":{"slug":"/code-style-guide/"},"frontmatter":{"tags":["javascript"],"title":"Using a Code Style Guide to Enforce Team Best Practices","type":"post"}},"next":{"fields":{"slug":"/circular-dependencies-bug/"},"frontmatter":{"tags":["javascript"],"title":"How to prevent circular dependencies","type":"post"}}}}}