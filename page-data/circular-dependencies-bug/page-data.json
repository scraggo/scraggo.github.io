{"componentChunkName":"component---src-templates-blog-post-js","path":"/circular-dependencies-bug/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"941f208a-4a37-5535-a9e1-dbfa0cc4681d","excerpt":"Some errors are kind of mysterious. The first time I got “‘myFunction’ is not a function” type errors, I was at a loss for a few hours. Logging out the…","html":"<p>Some errors are kind of mysterious. The first time I got “‘myFunction’ is not a function” type errors, I was at a loss for a few hours. Logging out the functions from my require statements came back as <code class=\"language-text\">{}</code> or <code class=\"language-text\">undefined</code>.</p>\n<p>What I learned, TL;DR - don’t import file ‘a’ into file ‘b’ AND file ‘b’ into file ‘a’. That’s an example of a “circular dependency.”</p>\n<p>Brief example of creating a circular dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myUtils.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> validate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./validators'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myUtil</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">thing</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  thing<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// validators.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> myUtil <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myUtils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">thing</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> thing <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> thing<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ultimateValidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">thing</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myUtil</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> thing <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> thing <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  validate<span class=\"token punctuation\">,</span>\n  ultimateValidate<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>myUtils.js requires validators.js and vice versa. Can you see how this is “circular”? The <code class=\"language-text\">require</code> system will resolve one file before another and does so to avoid a feedback loop where one file requires another, which requires the other, which requires the other…</p>\n<p>How to avoid:</p>\n<ul>\n<li>Have file ‘a’ import dependencies not required in file ‘b’</li>\n<li>Have ‘main’ files which handle module integrations</li>\n<li>Use dependency injection</li>\n</ul>\n<p>For our brief example, <code class=\"language-text\">myUtil</code> could use dependency injection:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myUtils.js</span>\n<span class=\"token comment\">// here, we removed the require validators statement</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myUtil</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">thing<span class=\"token punctuation\">,</span> validatorFunc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validatorFunc</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// module.exports = ...</span>\n\n<span class=\"token comment\">// validators.js</span>\n<span class=\"token comment\">// now we can safely require myUtil</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ultimateValidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">thing</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myUtil</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">,</span> validate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- we pass in validate function where it's in scope</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Read more:</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/10869276/how-to-deal-with-cyclic-dependencies-in-node-js\">https://stackoverflow.com/questions/10869276/how-to-deal-with-cyclic-dependencies-in-node-js</a></p>\n<p><a href=\"https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de\">https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de</a></p>\n</blockquote>","fields":{"slug":"/circular-dependencies-bug/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 23, 2019","description":null,"tags":["JavaScript"],"title":"How to prevent circular dependencies"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/circular-dependencies-bug/","previous":{"fields":{"slug":"/custom-type-checking-isnan/"},"frontmatter":{"title":"Custom type checking - isNaN vs Number.isNaN","type":"post"}},"next":{"fields":{"slug":"/git-commit-format-squash/"},"frontmatter":{"title":"How to format and edit your git commit messages","type":"post"}}}}}