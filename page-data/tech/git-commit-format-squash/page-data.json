{"componentChunkName":"component---src-templates-blog-post-js","path":"/tech/git-commit-format-squash/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"602de416-b9ad-5474-8510-484e93a549d4","excerpt":"When writing commit messages, itâ€™s ideal to make them easy for another developer to read and understand exactly whatâ€™s in the commit. Oftentimes, though, weâ€¦","html":"<p>When writing commit messages, itâ€™s ideal to make them easy for another developer to read and understand exactly whatâ€™s in the commit. Oftentimes, though, we write commit messages quickly just to push a branch at the end of a workday, for instance (I know Iâ€™m guilty of this).</p>\n<p>One team member brought the <a href=\"https://www.conventionalcommits.org/en/v1.0.0-beta.3/\">Conventional Commits</a> format to our attention. Iâ€™ve enjoyed using it and seeing the results when reviewing pull requests.</p>\n<p>To enforce this pattern, I recommend using this tool: <a href=\"https://github.com/conventional-changelog/commitlint\">conventional-changelog/commitlint: ðŸ““ Lint commit messages</a>.</p>\n<p>Verbatim from the readme:</p>\n<hr>\n<p>In general the pattern mostly looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">type(scope?): subject  #scope is optional</code></pre></div>\n<p>Real world examples can look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">chore: run tests on travis ci\nfix(server): send cors headers\nfeat(blog): add comment section</code></pre></div>\n<p>Common types:</p>\n<ul>\n<li>build</li>\n<li>ci</li>\n<li>chore</li>\n<li>docs</li>\n<li>feat</li>\n<li>fix</li>\n<li>perf</li>\n<li>refactor</li>\n<li>revert</li>\n<li>style</li>\n<li>test</li>\n</ul>\n<hr>\n<p>Want to edit your commit messages before you do a pull request? Squash your commits!</p>\n<p>Hereâ€™s <a href=\"/tech/how-to-squash-commits\">my guide</a> on squashing commits.</p>\n<p>Here are some others in case you want to learn more:</p>\n<blockquote>\n<p><a href=\"https://medium.com/@slamflipstrom/a-beginners-guide-to-squashing-commits-with-git-rebase-8185cf6e62ec\">A Beginnerâ€™s Guide to Squashing Commits with Git Rebase</a></p>\n<p><a href=\"https://medium.com/@gitudaniel/how-to-squash-multiple-commits-in-git-58c22387c4ce\">How to squash multiple commits in git â€“ Daniel Gitu â€“ Medium</a></p>\n<p><a href=\"https://www.devroom.io/2011/07/05/git-squash-your-latests-commits-into-one/\">Git: Squash your latests commits into one - ariejan de vroom</a></p>\n<p><a href=\"https://github.com/todotxt/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit\">Squash All Commits Related to a Single Issue into a Single Commit</a></p>\n</blockquote>\n<p>In a nutshell, use git rebase the branch youâ€™re on and pick, edit, or squash the commits interactively.</p>\n<h2>Conclusion</h2>\n<p>The conventional commit format is definitely worth trying for both team and personal projects.</p>\n<h2>Related posts</h2>\n<p><a href=\"/tech/code-style-guide\">Using a Code Style Guide to Enforce Team Best Practices</a></p>","fields":{"slug":"/tech/git-commit-format-squash/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 24, 2019","description":null,"tags":["git"],"title":"How to format and edit your git commit messages"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tech/git-commit-format-squash/","previous":{"fields":{"slug":"/tech/circular-dependencies-bug/"},"frontmatter":{"title":"How to prevent circular dependencies","type":"post"}},"next":{"fields":{"slug":"/tech/recursive-filter-function/"},"frontmatter":{"title":"Using a filter function recursively","type":"post"}}}}}