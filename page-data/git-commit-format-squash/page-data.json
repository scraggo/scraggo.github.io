{"componentChunkName":"component---src-templates-blog-post-js","path":"/git-commit-format-squash/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"86cb31eb-6b40-50e3-9ddc-d195f0cee1c6","excerpt":"When writing commit messages, itâ€™s ideal to make them easy for another developer to read and understand exactly whatâ€™s in the commit. Oftentimes, though, weâ€¦","html":"<p>When writing commit messages, itâ€™s ideal to make them easy for another developer to read and understand exactly whatâ€™s in the commit. Oftentimes, though, we write commit messages quickly just to push a branch at the end of a workday, for instance (I know Iâ€™m guilty of this).</p>\n<p>One team member brought the <a href=\"https://www.conventionalcommits.org/en/v1.0.0-beta.3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Conventional Commits</a> format to our attention. Iâ€™ve enjoyed using it and seeing the results when reviewing pull requests.</p>\n<p>To enforce this pattern, I recommend using this tool: <a href=\"https://github.com/conventional-changelog/commitlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">conventional-changelog/commitlint: ðŸ““ Lint commit messages</a>.</p>\n<p>Verbatim from the readme:</p>\n<hr>\n<p>In general the pattern mostly looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">type(scope?): subject  #scope is optional</code></pre></div>\n<p>Real world examples can look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">chore: run tests on travis ci\nfix(server): send cors headers\nfeat(blog): add comment section</code></pre></div>\n<p>Common types:</p>\n<ul>\n<li>build</li>\n<li>ci</li>\n<li>chore</li>\n<li>docs</li>\n<li>feat</li>\n<li>fix</li>\n<li>perf</li>\n<li>refactor</li>\n<li>revert</li>\n<li>style</li>\n<li>test</li>\n</ul>\n<p>The conventional commit format is definitely worth trying for both team and personal projects.</p>\n<h2 id=\"squashing-commits\" style=\"position:relative;\"><a href=\"#squashing-commits\" aria-label=\"squashing commits permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Squashing commits</h2>\n<p>Want to edit your commit messages before you do a pull request? Squash your commits!</p>\n<p>Hereâ€™s <a href=\"/how-to-squash-commits\">my guide on how to do it</a>.</p>\n<h2 id=\"related-posts\" style=\"position:relative;\"><a href=\"#related-posts\" aria-label=\"related posts permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related posts</h2>\n<p><a href=\"/tech/code-style-guide\">Using a Code Style Guide to Enforce Team Best Practices</a></p>","fields":{"slug":"/git-commit-format-squash/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 24, 2019","description":null,"tags":["git"],"title":"How to format and edit your git commit messages"}}},"pageContext":{"slug":"/git-commit-format-squash/","previous":{"fields":{"slug":"/circular-dependencies-bug/"},"frontmatter":{"tags":["javascript"],"title":"How to prevent circular dependencies","type":"post"}},"next":{"fields":{"slug":"/recursive-filter-function/"},"frontmatter":{"tags":["javascript"],"title":"Using a filter function recursively","type":"post"}}}},"staticQueryHashes":["3159585216","63159454"]}