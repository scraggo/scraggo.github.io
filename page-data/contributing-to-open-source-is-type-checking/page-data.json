{"componentChunkName":"component---src-templates-blog-post-js","path":"/contributing-to-open-source-is-type-checking/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"5c2a373c-48fe-5078-9e3d-f21888265979","excerpt":"This post is a recount of my recent experience contributing to is, a JavaScript open source type checking library. https://github.com/sindresorhus/is https‚Ä¶","html":"<p>This post is a recount of my recent experience contributing to <a href=\"https://github.com/sindresorhus/is\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">is</a>, a JavaScript open source type checking library.</p>\n<blockquote>\n<p><a href=\"https://github.com/sindresorhus/is\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/is</a></p>\n<p><a href=\"https://www.npmjs.com/package/@sindresorhus/is\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/@sindresorhus/is</a></p>\n</blockquote>\n<p>I‚Äôll outline the process from beginning to end: the initial filing of the feature request, implementing the feature, collaborating on the pull request, and getting the feature released.</p>\n<p>Some of the open source contribution best-practices I tried to follow:</p>\n<ul>\n<li><em>Do not</em> open a pull request first.</li>\n<li>If you have a feature idea, a bug report, or pretty much anything to say, file an issue.</li>\n<li>Explain the problem and the value of the solution. Converse with the owner of the repo and have an open mind. (Maybe what you‚Äôre requesting is already available in the library)</li>\n<li>Get buy-in and wait for an explicit invitation to alter the source code.</li>\n<li>Make edits. Write tests and update the documentation.</li>\n<li>Converse, ask questions, follow the style that the maintainers propose.</li>\n<li>Be gracious and thankful!</li>\n</ul>\n<h2>About <code class=\"language-text\">is</code></h2>\n<p><code class=\"language-text\">is</code> makes checking a type in JavaScript much easier than what‚Äôs built into the language.</p>\n<p>The first example in the README shows how easy it is to use:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> is <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@sindresorhus/is'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ü¶Ñ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> 'string'</span>\n\n<span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> 'Map'</span>\n\nis<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//=> true</span></code></pre></div>\n<p>The <a href=\"https://www.npmjs.com/~sindresorhus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">author of this library</a> has created over 1,000 packages that are used by many developers daily. This one in particular has 2,461,210 weekly downloads.</p>\n<h2>Filing the feature request</h2>\n<p>One check in particular I find especially useful in the <code class=\"language-text\">is</code> library is <code class=\"language-text\">is.nullOrUndefined(value)</code>. The JS builtin <code class=\"language-text\">!value</code> will consider the number <code class=\"language-text\">0</code> false and I always find myself making relatively verbose handlers for this case.</p>\n<p>I wanted a way to make a union (this type ‚Äúor‚Äù that type) for any number of arbitrary types. I scoured the documentation for this functionality and didn‚Äôt find it. I was able to write a wrapper function that created this functionality and could‚Äôve stopped there, but I didn‚Äôt. I decided to request that this new feature be built into the library.</p>\n<p>I filed this issue: <a href=\"https://github.com/sindresorhus/is/issues/98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/is/issues/98</a></p>\n<p>I showed how I implemented the feature and wrote a simple test case to show its usage.</p>\n<p>The author (<code class=\"language-text\">@sindresorhus</code> himself) wrote back to say that it seemed useful, but didn‚Äôt want to add a new function to the API. He asked if I had thoughts or ideas how to make it work with the existing <code class=\"language-text\">any</code> function.</p>\n<p>I wasn‚Äôt expecting him to actually respond! I shook off my surprise and wrote him back to say that I liked what he proposed but didn‚Äôt want to make it confusing. Didn‚Äôt hear back for a while.</p>\n<p>When he responded, he had ‚Äúthe answer.‚Äù He wrote a quick test case and said ‚ÄúPR welcome for that.‚Äù I was IN!</p>\n<h2>Implementing the feature</h2>\n<p>I‚Äôve used TypeScript before, but I‚Äôm pretty inexperienced. Some things I learned:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript type guards</a></li>\n<li>Linting with <a href=\"https://github.com/xojs/xo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xo</a></li>\n<li>The <a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">testing library Ava</a></li>\n</ul>\n<p>I didn‚Äôt feel confident at first, but once I started making changes, I got into the groove.</p>\n<p>Ava was really interesting to work with. The library encourages keeping tests <em>dead simple</em>. It‚Äôs a pleasure to write assertions without complex setup. (I plan on writing more about Ava in a future post.)</p>\n<p>I got the feature to work, wrote a few test cases, and submitted the pull request.</p>\n<h2>The pull request</h2>\n<p>Here it is: <a href=\"https://github.com/sindresorhus/is/pull/104\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/is/pull/104</a></p>\n<p>It was scary working with a team of people I‚Äôve never worked with before. They started making comments and code suggestions soon after I made the PR.</p>\n<p>Handling types/custom types was challenging for me since I don‚Äôt work with TypeScript day to day. There was a good bit of back and forth about:</p>\n<ul>\n<li>the choice to make a new union type or just inline existing types</li>\n<li>where and when to cast types</li>\n</ul>\n<p>I felt nervous about my responses. Impostor syndrome came out full force. I tried to keep it cool, ask clarifying questions, and a handful of changes later, we were all happy with the result.</p>\n<p>I noticed something that I didn‚Äôt realize was possible: the maintainers can change PR titles and descriptions (and some other things that I wrote originally) as they please. I was fascinated by their changes. It‚Äôs <em>their</em> library, after all, and they <em>should</em> be able to do that to keep the repo history consistent.</p>\n<h2>The release of is@2.1.0</h2>\n<p>Shortly after the pull request was merged, the owner released the 2.1.0 version of the library that had the new feature in it! It‚Äôs available to use now - both of these links will tell you how:</p>\n<blockquote>\n<p><a href=\"https://github.com/sindresorhus/is\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/is</a></p>\n<p><a href=\"https://www.npmjs.com/package/@sindresorhus/is\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/@sindresorhus/is</a></p>\n</blockquote>\n<p>and look for <code class=\"language-text\">.any</code> to use the function I contributed to:</p>\n<blockquote>\n<p><a href=\"https://github.com/sindresorhus/is#anypredicate--predicate-values\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/is#anypredicate‚Äîpredicate-values</a></p>\n</blockquote>\n<p>Working on this feature was amazing in so many ways. I had a great experience collaborating with <code class=\"language-text\">@sindresorhus</code> and his team, I enjoyed the challenge of working on an unfamiliar codebase, and it was incredibly rewarding to see that the feature I put in might be used and appreciated by other developers. I‚Äôm looking forward to the next time I have the chance to contribute to an awesome, well-maintained open source library. Let me know about your experiences using <code class=\"language-text\">is</code>. üòÅ</p>","fields":{"slug":"/contributing-to-open-source-is-type-checking/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 22, 2020","description":null,"tags":["typescript","open source"],"title":"Contributing a New Feature to Open Source: @sindresorhus/is"}}},"pageContext":{"slug":"/contributing-to-open-source-is-type-checking/","previous":{"fields":{"slug":"/testing-immutable-js-with-sinon-custom-matchers/"},"frontmatter":{"tags":["testing","sinon","immutablejs"],"title":"Testing immutable js with sinon custom matchers","type":"post"}},"next":{"fields":{"slug":"/comparing-javascript-test-runners/"},"frontmatter":{"tags":["javascript","test runners","ava","mocha","jest","tech talk"],"title":"Comparing JavaScript Test Runners","type":"post"}}}},"staticQueryHashes":["3159585216","63159454"]}