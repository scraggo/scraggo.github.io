{"componentChunkName":"component---src-templates-blog-post-js","path":"/recursive-filter-function/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"657093ab-4233-5d14-a741-44f2fa462db8","excerpt":"The problem Given our array data structure, we only want to include items that have an ‘age’ property and the age is greater than 17. If the person is under age…","html":"<h2>The problem</h2>\n<p>Given our array data structure, we only want to include items that have an ‘age’ property and the age is greater than 17. If the person is under age, we won’t allow any of their friends to be included (even if they are old enough to be.)</p>\n<p>(Contrived scenario, I know, but I recently needed to do something like this for a different type of authorization.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sherry O'Teri\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob Ross'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validAge</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thisWontWork</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// here is the recursive call</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">thisWontWork</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">validAge</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">validAge</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">thisWontWork</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{\"age\":22,\"friends\":[{\"age\":17},{\"age\":34},{\"name\":\"Sherry O'Teri\"}]}]</span></code></pre></div>\n<p><a href=\"https://repl.it/@decguitar/recursive-filter-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Run this code on repl.it</a></p>\n<p>We can see that on the top level, the filter works as expected. But if the valid person has <code class=\"language-text\">friends</code> they’re <em>all</em> included. What gives? Let’s break it down a little bit.</p>\n<p>Within the filter function of any given <code class=\"language-text\">Array.prototype.filter</code> call, we need to return a boolean. This line returns the <strong>entire</strong> item, not the subset of items we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">thisWontWork</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">validAge</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would be especially bad if we just returned the resulting array from <code class=\"language-text\">thisWontWork</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">thisWontWork</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">thisWontWork</code> returns the <em>result</em> of the filtering which is an <strong>array</strong>. If there are no matches (the filter function always returns false), we still get an array as the return. We can see that even if the array is empty, that item will always be <code class=\"language-text\">true</code> at the top level:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- where Boolean([]) === true</span></code></pre></div>\n<p>Aptly named, <code class=\"language-text\">thisWontWork</code>.</p>\n<h2>The solution</h2>\n<p>We need to handle this mismatch with a custom filter function. The swiss army knife of Array.prototype methods is <code class=\"language-text\">Array.prototype.reduce</code>. <strong>You can make map, filter, and other array methods (as well as fancy combinations) with reduce!</strong></p>\n<p>Here’s how I solved our recursive filter problem using <code class=\"language-text\">reduce</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// same as above</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validAge</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thisWillWork</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// acc -> short for \"accumulator\" (array)</span>\n      <span class=\"token comment\">// item -> the current array item</span>\n\n      <span class=\"token comment\">// so that we don't overwrite the item parameter</span>\n      <span class=\"token keyword\">const</span> newItem <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// here is the recursive call</span>\n        newItem<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">=</span> <span class=\"token function\">thisWillWork</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validAge</span><span class=\"token punctuation\">(</span>newItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// here's where acc takes the new item</span>\n        acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// we always have to return acc</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// initialize accumulator (empty array)</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">thisWillWork</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{\"age\":22,\"friends\":[{\"age\":34}]}]</span></code></pre></div>\n<p><a href=\"https://repl.it/@decguitar/recursive-filter-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Run this code on repl.it</a></p>\n<p>Awesome! It’s working as expected. Only the 22 year old person at the top level is the right age, and we get only the friend of theirs that’s the right age.</p>\n<p>Imagine solving this problem without recursion. We would need an indefinite number of nested for loops. It would get messy really fast.</p>\n<p>Read more about recursion:</p>\n<blockquote>\n<p><a href=\"http://javascript.info/recursion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Recursion and stack</a></p>\n</blockquote>\n<p>Read more about array methods:</p>\n<blockquote>\n<p><a href=\"https://javascript.info/array-methods#transform-an-array\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Array methods</a></p>\n<p><a href=\"https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simplify your JavaScript – Use .map(), .reduce(), and .filter()</a></p>\n<p><a href=\"https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Functional Programming — map, filter and reduce</a></p>\n<p><a href=\"https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding map, filter and reduce in Javascript – Hacker Noon</a></p>\n<p><a href=\"https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript — Learn to Chain Map, Filter, and Reduce</a></p>\n<p><a href=\"https://flaviocopes.com/javascript-loops-map-filter-reduce-find/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Write JavaScript loops using map, filter, reduce and find</a></p>\n</blockquote>","fields":{"slug":"/recursive-filter-function/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"March 28, 2019","description":null,"tags":["javascript"],"title":"Using a filter function recursively"}}},"pageContext":{"slug":"/recursive-filter-function/","previous":{"fields":{"slug":"/git-commit-format-squash/"},"frontmatter":{"tags":["git"],"title":"How to format and edit your git commit messages","type":"post"}},"next":{"fields":{"slug":"/catching-handling-errors-promise-chains/"},"frontmatter":{"tags":["javascript"],"title":"Catching and handling different types of errors in promise chains","type":"post"}}}},"staticQueryHashes":["3159585216","63159454"]}