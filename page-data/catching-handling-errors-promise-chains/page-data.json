{"componentChunkName":"component---src-templates-blog-post-js","path":"/catching-handling-errors-promise-chains/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"3220ea90-ef5c-5200-befb-6f9a58952f53","excerpt":"When you need to make sequential API calls, promise chains are a reliable way to go. It gets a little tricky when you need to throw and handle errors…","html":"<p>When you need to make sequential API calls, promise chains are a reliable way to go. It gets a little tricky when you need to throw and handle errors differently at different points in the chain. This post will go into:</p>\n<ul>\n<li>throwing specific types of errors using <code class=\"language-text\">Promise.reject</code></li>\n<li>creating an object literal dictionary to handle logic</li>\n<li>gracefully handling the errors differently at the end of the chain</li>\n</ul>\n<p>This article is where I learned these techniques -> <a href=\"https://medium.com/@arthurxavier/error-handling-in-long-promise-chains-155f610b5bc6\">Error handling in long Promise chains – Arthur Xavier – Medium</a></p>\n<h2>Overview</h2>\n<ul>\n<li>Every service call (promise) gets its own <code class=\"language-text\">.catch</code>.</li>\n<li>This <code class=\"language-text\">.catch</code> will send a <code class=\"language-text\">Promise.reject(&lt;your message here>)</code>.</li>\n<li>At the end of the service call promise chain is a <code class=\"language-text\">.catch</code> that handles all the errors.</li>\n</ul>\n<h2>What we’re trying to do</h2>\n<p>Changing a password for a user account is an operation that requires some security measures. In our case, before allowing the password to change, we are going to validate the current password. This requires an API call. If this first call returns successfully, we can then update the password which also requires an API call. If second (and final) call returns successfully, we’ll display a success message. Here’s the main promise-chain:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// inside a React class</span>\n<span class=\"token function-variable function\">handleChangePassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">password1<span class=\"token punctuation\">,</span> password2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">validateCurrentPassword</span><span class=\"token punctuation\">(</span>password1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updatePassword</span><span class=\"token punctuation\">(</span>password2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>We call <code class=\"language-text\">validateCurrentPassword</code>, then</li>\n<li>We call <code class=\"language-text\">updatePassword</code></li>\n</ol>\n<p>Let’s take care of the error cases first.</p>\n<h2>Error handling</h2>\n<p>We can’t assume the two API calls will be successful. Above, there’s a <code class=\"language-text\">.catch</code> which will handle errors as we see fit. One <code class=\"language-text\">.catch</code> is <em>sometimes</em> enough, but in our case, we want to be very specific about catching errors:</p>\n<ul>\n<li>if error.message is <code class=\"language-text\">invalid_credential</code> or <code class=\"language-text\">weak_password</code>, display their corresponding messages</li>\n<li>if error.message doesn’t match one of the above, we’ll display a generic message.</li>\n</ul>\n<p>Also notice <code class=\"language-text\">errorMessageDict</code>. I vastly prefer using a dictionary mapping of results over conditional blocks like <code class=\"language-text\">if (message === 'one') { error = \"this is the ONE error\"} else if (...)</code> etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this object is declared before the class</span>\n<span class=\"token keyword\">const</span> errorMessageDict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  invalid_credential<span class=\"token operator\">:</span> <span class=\"token string\">\"Unable to verify user or current password.\"</span><span class=\"token punctuation\">,</span>\n  weak_password<span class=\"token operator\">:</span> <span class=\"token string\">\"New password isn't strong enough.\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ResetPassword</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//...</span>\n\n<span class=\"token comment\">// this code is part of a React class component</span>\n<span class=\"token function-variable function\">displayError</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">handleError</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// here is where we see if message is in `errorMessageDict`. If not, it'll be</span>\n  <span class=\"token comment\">// undefined and it'll return a default.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">displayError</span><span class=\"token punctuation\">(</span>errorMessageDict<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"Unable to update password.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, let’s go into sending specific error messages into the above handler.</p>\n<h2>Promise.reject to throw specified errors</h2>\n<p>Here’s where it all comes together. Both API calls have their own <code class=\"language-text\">.catch</code>. This way, we are being detailed about the API call control flow. In each <code class=\"language-text\">.catch</code> is a <code class=\"language-text\">Promise.reject</code>. You can use <code class=\"language-text\">throw new Error('...')</code> but I like this better. It sends a clear message to the developer that we’re <strong>not</strong> trying to crash the application, we’re sending a message to our error handler.</p>\n<p>Also notice how we are always returning the API call. Without doing so, we wouldn’t be able to chain the API calls.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// again this code is part of a React class component</span>\n<span class=\"token function-variable function\">displaySuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">validateCurrentPassword</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">oldPassword</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">APICallToValidateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> oldPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invalid_credential'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">updatePassword</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newPassword</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">APICallToUpdatePassword</span><span class=\"token punctuation\">(</span>newPassword<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">displaySuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'auth/weak-password'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'weak_password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'generic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Again, this article is where I learned these techniques -> <a href=\"https://medium.com/@arthurxavier/error-handling-in-long-promise-chains-155f610b5bc6\">Error handling in long Promise chains – Arthur Xavier – Medium</a></p>\n<p>I hope this post was helpful, thanks for reading!</p>","fields":{"slug":"/catching-handling-errors-promise-chains/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"April 03, 2019","description":null,"tags":["javascript"],"title":"Catching and handling different types of errors in promise chains"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/catching-handling-errors-promise-chains/","previous":{"fields":{"slug":"/recursive-filter-function/"},"frontmatter":{"tags":["javascript"],"title":"Using a filter function recursively","type":"post"}},"next":{"fields":{"slug":"/prepare-for-initial-screens/"},"frontmatter":{"tags":["career"],"title":"How to ace your initial programming job screen","type":"post"}}}}}