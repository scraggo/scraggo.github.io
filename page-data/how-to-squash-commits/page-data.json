{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-to-squash-commits/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"71cb4d5a-1ffa-5471-9090-7ad8a844304b","excerpt":"Updated Sep 3, 2020 This article outlines how to use the ‚Äúsquash‚Äù feature of an interactive . What does ‚Äúsquashing‚Äù do? It allows you to take changes that are‚Ä¶","html":"<p><em>Updated Sep 3, 2020</em></p>\n<p>This article outlines how to use the ‚Äúsquash‚Äù feature of an interactive <code class=\"language-text\">git rebase</code>.</p>\n<h2>What does ‚Äúsquashing‚Äù do?</h2>\n<p>It allows you to take changes that are spread amongst multiple commits and consolidate them into one.</p>\n<h2>Why should one consider squashing commits?</h2>\n<ul>\n<li>A clean history makes tracking changes to a large codebase across time much easier.</li>\n<li>Many commits are small and unimportant in the grand scheme to keep as standalone commits. Example: ‚ÄúFix documentation spelling mistake‚Äù</li>\n</ul>\n<h2>How to squash commits</h2>\n<p>To squash multiple commits into one in the branch you‚Äôre on, do the following:</p>\n<ul>\n<li>Run <code class=\"language-text\">git log</code> to determine how many commits to squash. Let‚Äôs assume 4.</li>\n<li>Run <code class=\"language-text\">git rebase -i HEAD~4</code> (with 4 being the number of commits)</li>\n<li>OR</li>\n<li>Run <code class=\"language-text\">git rebase -i [SHA]</code> (where <code class=\"language-text\">[SHA]</code> is the commit <em>after</em> the last one you want to squash. *)</li>\n<li>You should see a list of commits, each commit starting with the word ‚Äúpick‚Äù.</li>\n<li>Make sure the topmost, first commit says ‚Äúpick‚Äù and change the rest below from ‚Äúpick‚Äù to ‚Äúsquash‚Äù. This will squash each commit into the previous commit, which will continue until every commit is squashed into the first commit.</li>\n<li>Save and close the editor.</li>\n<li>It will give you the opportunity to change the commit message. What you see is a single message containing all of the commit messages. Edit these as you wish.</li>\n<li>Save and close the editor again.</li>\n<li>Important: If you‚Äôve already pushed commits to origin, and then squash them locally, you will have to force the push to your branch. - <code class=\"language-text\">git push origin branch-name --force</code> (note that you can use <code class=\"language-text\">-f</code> instead of <code class=\"language-text\">--force</code>.)</li>\n</ul>\n<p>* <em>What if you want to squash and include the first commit?</em> use <code class=\"language-text\">git rebase -i --root</code>. <a href=\"https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---root\">Documentation</a></p>\n<p>Let‚Äôs go over a complete example.</p>\n<h2>Process overview</h2>\n<p>We finished some feature branch work that we want to merge into master. We accidentally left out the ticket number, the messages aren‚Äôt so clear, and we don‚Äôt need the error fixing work in its own commit:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">$ git log\n\ncommit 111111111111\n    improve parsing function\ncommit 222222222222\n    fix regex error in object file\ncommit 333333333333\n    test that crazy bug case\ncommit 444444444444\n    etc</code></pre></div>\n<p>We put in a pull request, get it approved and decide to squash all the commits into one. We run the command <code class=\"language-text\">git rebase -i 444444444444</code> at our terminal.</p>\n<p>After going through the whole process outlined above, our result commit is:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">[JIRA-535] Fix that crazy bug:\n\n- break parsing function into smaller functions\n- test that crazy bug case</code></pre></div>\n<p>We can breathe easier; the messaging in this single commit will help future developers understand and find the work more easily.</p>\n<p>Now, imagine looking at this tidy commit list on the master branch:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">[JIRA-523] Fix that crazy bug:\n[JIRA-535] Put in UI feature:\n[JIRA-514] Get data from API:\n[JIRA-125] Upgrade dependency:\n[JIRA-567] Homepage accessibility:\n...</code></pre></div>\n<p>Happy squashing üòÅ</p>\n<h3>Related posts</h3>\n<p><a href=\"/git-commit-format-squash\">Formatting commit messages with Conventional Commits</a></p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.carbonfive.com/2017/08/28/always-squash-and-rebase-your-git-commits/\">https://blog.carbonfive.com/2017/08/28/always-squash-and-rebase-your-git-commits/</a></li>\n<li><a href=\"https://github.com/todotxt/todo.txt-android/wiki/squash-all-commits-related-to-a-single-issue-into-a-single-commit\">https://github.com/todotxt/todo.txt-android/wiki/squash-all-commits-related-to-a-single-issue-into-a-single-commit</a></li>\n<li><a href=\"https://github.com/wprig/wprig/wiki/How-to-squash-commits\">https://github.com/wprig/wprig/wiki/How-to-squash-commits</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2119480/edit-the-root-commit-in-git\">https://stackoverflow.com/questions/2119480/edit-the-root-commit-in-git</a></li>\n<li><a href=\"https://medium.com/@slamflipstrom/a-beginners-guide-to-squashing-commits-with-git-rebase-8185cf6e62ec\">A Beginner‚Äôs Guide to Squashing Commits with Git Rebase</a></li>\n<li><a href=\"https://medium.com/@gitudaniel/how-to-squash-multiple-commits-in-git-58c22387c4ce\">How to squash multiple commits in git ‚Äì Daniel Gitu ‚Äì Medium</a></li>\n<li><a href=\"https://www.devroom.io/2011/07/05/git-squash-your-latests-commits-into-one/\">Git: Squash your latests commits into one - ariejan de vroom</a></li>\n<li><a href=\"https://github.com/todotxt/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit\">Squash All Commits Related to a Single Issue into a Single Commit</a></li>\n</ul>\n<h2>How to set up Visual Studio Code as your git editor</h2>\n<p><a href=\"https://code.visualstudio.com/docs/editor/versioncontrol#_vs-code-as-git-editor\">https://code.visualstudio.com/docs/editor/versioncontrol#_vs-code-as-git-editor</a></p>","fields":{"slug":"/how-to-squash-commits/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"December 21, 2019","description":null,"tags":["git"],"title":"How to Squash All Commits Related to a Single Issue into a Single Commit"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-to-squash-commits/","previous":{"fields":{"slug":"/about-songmind-studios/"},"frontmatter":{"tags":["music education"],"title":"About Songmind Studios","type":"post"}},"next":{"fields":{"slug":"/2020-decade-in-review/"},"frontmatter":{"tags":null,"title":"2020 Resolutions and Reviewing the Decade","type":"post"}}}}}