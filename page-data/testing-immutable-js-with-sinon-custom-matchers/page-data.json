{"componentChunkName":"component---src-templates-blog-post-js","path":"/testing-immutable-js-with-sinon-custom-matchers/","result":{"data":{"site":{"siteMetadata":{"title":"scraggo.com"}},"markdownRemark":{"id":"f67acd72-5aad-55d1-bd3b-3e28be601115","excerpt":"Problems with unexpected assertion failures can arise while testing  with . This post is a brief guide on how to create a custom matcher that will correctly…","html":"<p>Problems with unexpected assertion failures can arise while testing <a href=\"https://immutable-js.github.io/immutable-js/\"><code class=\"language-text\">immutablejs</code></a> with <a href=\"https://sinonjs.org\"><code class=\"language-text\">sinon</code></a>. This post is a brief guide on how to create a custom matcher that will correctly calculate the equivalence between a mock/stub/spy call with an <code class=\"language-text\">immutable</code> parameter.</p>\n<p>The way I’ll be making the assertion is with <code class=\"language-text\">calledWith</code> from <a href=\"https://github.com/domenic/sinon-chai\"><code class=\"language-text\">sinon-chai</code></a> (a plugin for <code class=\"language-text\">chai</code> that helps with making <code class=\"language-text\">should</code> or <code class=\"language-text\">expect</code> assertions for <code class=\"language-text\">sinon</code> mocks).</p>\n<p>This <a href=\"https://github.com/sinonjs/sinon/issues/2077\">github issue on sinonjs</a> outlines the problem. It’s a very easy one to run into. This post is one solution to it.</p>\n<blockquote>\n<p><a href=\"https://github.com/sinonjs/sinon/issues/2077\">Sinon calledWith fails comparing ImmutableJS arguments that it deems equal</a></p>\n</blockquote>\n<p><em>Update Feb 20, 2020:</em> This post is now featured on <a href=\"https://sinonjs.org/how-to/\">the How To section of the sinonjs site</a>!</p>\n<h2>The callback and its calling function</h2>\n<p>Here’s the function in our source code that we’ll be mocking:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> List <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'immutable'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callOptionalImmutableParam</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> option <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do some stuff</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'crunched data'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>interesting</em> thing about this function is that it takes an optional argument with named parameter <code class=\"language-text\">option</code> that will default to an empty Immutable List.</p>\n<p>Some <code class=\"language-text\">theoreticalFunction</code> could use this as a callback:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">theoreticalFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// pretend we're dynamically getting a List from `data`</span>\n  <span class=\"token keyword\">const</span> customList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> option<span class=\"token operator\">:</span> customList <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Successfully testing the callback</h2>\n<p>To test that <code class=\"language-text\">theoreticalFunction</code> calls <code class=\"language-text\">callOptionalImmutableParam</code> with the right arguments, here’s the setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'chai'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> sinon <span class=\"token keyword\">from</span> <span class=\"token string\">'sinon'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> List<span class=\"token punctuation\">,</span> is <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'immutable'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Get a custom matcher to validate the option List\n * @param {Immutable.List} expected option List\n * @returns {Function} sinon.match\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMatcher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// use Immutable.is instead of deepEquals</span>\n    <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// message if path doesn't match:</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">.</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">getMatcher</code> function will be used in our assertions. It takes an <code class=\"language-text\">expected</code> value (which should be Immutable) and runs it through a <a href=\"https://sinonjs.org/releases/v7.5.0/matchers/\"><code class=\"language-text\">sinon.match</code> custom matcher function</a>. The comment <code class=\"language-text\">// use Immutable.is instead of deepEquals</code> points out what’s great about the custom matcher - we can use Immutable’s built-in comparison to get at the <em>values</em> inside of any Immutable data object. We also <code class=\"language-text\">stringify</code> the passed in <code class=\"language-text\">expected</code> argument so that if our assertion fails, we get a useful message instead of <code class=\"language-text\">undefined</code>.</p>\n<p>And the assertion:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calls callback with expected arguments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mockCall <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// call the function with `mockCall` as the callback:</span>\n  <span class=\"token function\">theoreticalFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mockCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// use `getMatcher` as the 2nd parameter of `calledWith`</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span>been<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getMatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We use <code class=\"language-text\">getMatcher</code> inside of <code class=\"language-text\">calledWith</code> (along with the first <code class=\"language-text\">data</code> argument) which gives us a passing test!</p>\n<h2>Testing without the matcher</h2>\n<p>Suppose we didn’t bother with a custom matcher:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calls callback with expected arguments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mockCall <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">theoreticalFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mockCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockCall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span>been<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> option<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">chai</code>’s built-in deep equals check is a no-go in this case. It will compare the (practically) useless meta-data inside the Immutable List instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">AssertionError: expected { path: List [ \"custom\", \"list\" ] } to equal { path: List [ \"custom\", \"list\" ] }\n  + expected - actual\n\n    {\n      \"path\": {\n  -    \"__altered\": true\n  +    \"__altered\": false\n        \"__hash\": [undefined]\n        \"__ownerID\": [undefined]\n        \"_capacity\": 2\n        \"_level\": 5\n          \"array\": [\n            \"moments\"\n            0\n          ]\n  -      \"ownerID\": {}\n  +      \"ownerID\": [undefined]\n        }\n        \"size\": 2\n      }\n    }</code></pre></div>\n<p>While the <em>values</em> in the Immutable structure are equivalent, the deep equals check finds these hidden properties. The failures are prefixed with <code class=\"language-text\">-</code>.</p>\n<p>The test failure terminal output can also be a list of <em>all</em> the calls to the mock function. One of them will look exactly correct, but will still complain about not being a match.</p>\n<h2>Read more</h2>\n<p>To learn more about sinon matchers and the related topics, have a look at the links below.</p>\n<ul>\n<li><a href=\"https://sinonjs.org/releases/v7.5.0/matchers/\">https://sinonjs.org/releases/v7.5.0/matchers/</a></li>\n<li><a href=\"https://changelog.com/posts/this-week-i-learned-about-sinon-matchers\">https://changelog.com/posts/this-week-i-learned-about-sinon-matchers</a></li>\n<li><a href=\"https://stackoverflow.com/questions/41231496/how-to-match-an-array-of-objects-with-sinon-js\">https://stackoverflow.com/questions/41231496/how-to-match-an-array-of-objects-with-sinon-js</a></li>\n</ul>","fields":{"slug":"/testing-immutable-js-with-sinon-custom-matchers/"},"frontmatter":{"author":"Dave Cohen","categories":["tech"],"date":"February 15, 2020","description":"Problems with unexpected assertion failures can arise while testing immutablejs with sinon. This post is a brief guide on how to create a custom matcher that will correctly calculate the equivalence between a mock/stub/spy call with an immutable parameter. The way I’ll be making the assertion is with calledWith from sinon-chai (a plugin for chai that helps with making should or expect assertions for sinon mocks). This github issue on sinonjs outlines the problem...","tags":["testing","sinon","immutablejs"],"title":"Testing immutable js with sinon custom matchers"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/testing-immutable-js-with-sinon-custom-matchers/","previous":{"fields":{"slug":"/2020-01-27-random-music-generators-news/"},"frontmatter":{"tags":["random music generators"],"title":"Random Music Generators News 2020-01-27","type":"post"}},"next":{"fields":{"slug":"/contributing-to-open-source-is-type-checking/"},"frontmatter":{"tags":["typescript","open source"],"title":"Contributing a New Feature to Open Source: @sindresorhus/is","type":"post"}}}}}