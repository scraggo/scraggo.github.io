{"version":3,"sources":["webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/words.js","webpack:///./src/utils/dataUtils.js","webpack:///./node_modules/lodash/_unicodeWords.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/kebabCase.js","webpack:///./src/pages/index.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./src/utils/stringUtils.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./src/components/PostsList.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./src/components/TagLink.js","webpack:///./node_modules/lodash/_createCompounder.js","webpack:///./node_modules/lodash/_castSlice.js"],"names":["rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","join","rsSymbol","reUnicode","RegExp","module","exports","string","match","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","undefined","chr","charAt","trailing","slice","upperFirst","toLowerCase","asciiWords","hasUnicodeWord","unicodeWords","pattern","guard","categoryFilter","category","data","node","frontmatter","categories","includes","getFormattedCategories","map","capitalizeWords","getImage","_ref","filename","sizingStrategy","found","allFile","edges","find","image","relativePath","endsWith","childImageSharp","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsUpper","rsMiscLower","rsMiscUpper","rsModifier","rsEmoji","reUnicodeWord","asciiToArray","unicodeToArray","kebabCase","createCompounder","result","word","index","React","createElement","Layout","SEO","title","PostsList","split","specialWords","ava","javascript","oop","typescript","length","lowerCased","w","capitalize","reAsciiWord","postData","allMarkdownRemark","posts","filter","className","_ref2","id","fields","excerpt","tags","url","slug","key","Link","to","date","tag","TagLink","text","variant","dangerouslySetInnerHTML","__html","description","props","StaticQuery","query","render","Object","assign","reHasUnicodeWord","test","createCaseFirst","contentMap","post","count","postList","_ref3","_ref4","capText","contentFunc","Error","arrayReduce","deburr","words","reApos","callback","replace","baseSlice","array","start","end"],"mappings":"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","file":"component---src-pages-index-js-ba3d0c8e1a0c9e792c4a.js","sourcesContent":["/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n","import { capitalizeWords } from 'src/utils/stringUtils';\n\n/**\n * Get a filter callback for category\n * @param {string} category\n * @returns {function} filter\n */\nexport const categoryFilter = category => data =>\n  data.node.frontmatter.categories.includes(category);\n\nexport const getFormattedCategories = frontmatter => {\n  const { categories } = frontmatter;\n  return categories\n    ? categories.map(capitalizeWords).join(', ')\n    : 'Uncategorized';\n};\n\n/**\n * Get image data from graphQl query\n * @param {object} config\n * @param {object} config.data -> the graphQl query result\n * @param {string} config.filename\n * @param {string} config.sizingStrategy -> oneOf('fixed', 'fluid')\n * @returns {object|undefined}\n */\nexport const getImage = ({ data, filename, sizingStrategy }) => {\n  // data.allFile.edges -> array\n  // data.allFile.edges[0].node.relativePath -> tech-projects/filename\n  // data.allFile.edges[0].node.childImageSharp.fluid -> object base 64\n  const found = data.allFile.edges.find(image =>\n    image.node.relativePath.endsWith(filename)\n  );\n  if (found) {\n    return found.node.childImageSharp[sizingStrategy];\n  }\n};\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","import React from 'react';\n// import { Link, graphql } from 'gatsby';\nimport Layout from 'src/components/Layout';\nimport PostsList from 'src/components/PostsList';\nimport SEO from 'src/components/SEO';\n\nexport default ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <PostsList title=\"All\" />\n  </Layout>\n);\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","import capitalize from 'lodash/capitalize';\n\nconst specialWords = {\n  ava: 'AVA',\n  javascript: 'JavaScript',\n  oop: 'OOP',\n  typescript: 'TypeScript',\n};\n\nexport const capitalizeWords = (word = '') => {\n  if (word.length < 1) {\n    return word;\n  }\n\n  const lowerCased = word.toLowerCase();\n  if (lowerCased in specialWords) {\n    return specialWords[lowerCased];\n  }\n\n  return word\n    .split(' ')\n    .map(w => capitalize(w))\n    .join(' ');\n};\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n","import React from 'react';\nimport { Link, graphql, StaticQuery } from 'gatsby';\n\nimport TagLink from 'src/components/TagLink';\nimport { categoryFilter, getFormattedCategories } from 'src/utils/dataUtils';\n\n/** posts -> already filtered edges */\n/** totalCount -> data.allMarkdownRemark.totalCount */\nconst PostsList = ({ data, category, title }) => {\n  if (!data) {\n    return null;\n  }\n\n  const postData = data.allMarkdownRemark.edges;\n  const posts = category ? postData.filter(categoryFilter(category)) : postData;\n\n  return (\n    <div className=\"posts-list\">\n      <div className=\"posts-category\">\n        <h2>{title} Posts </h2>\n        <span>({posts.length})</span>\n      </div>\n      {posts.map(({ node }) => {\n        const { id, fields, frontmatter, excerpt } = node;\n        const tags = frontmatter.tags || [];\n        const url = fields.slug;\n\n        return (\n          <article key={id} className=\"post-wrapper\">\n            <header className=\"post-title\">\n              <h3>\n                <Link to={url}>{frontmatter.title}</Link>\n              </h3>\n            </header>\n            <div className=\"post-info-sm flex flex-wrap\">\n              <div>\n                <Link to={url}>{frontmatter.date}</Link>\n                <span className=\"v-divider\">|</span>\n              </div>\n              <span className=\"post-categories\">\n                {getFormattedCategories(frontmatter)}\n              </span>\n              {tags.map(tag => (\n                <TagLink key={tag} text={tag} variant=\"postList\" />\n              ))}\n            </div>\n            <Link to={url}>\n              <section>\n                <p\n                  className=\"post-excerpt\"\n                  dangerouslySetInnerHTML={{\n                    __html: frontmatter.description || excerpt,\n                  }}\n                />\n              </section>\n            </Link>\n          </article>\n        );\n      })}\n    </div>\n  );\n};\n\nconst query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: \"post\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            categories\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            title\n            type\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 400)\n        }\n      }\n    }\n  }\n`;\n\nexport default props => (\n  <StaticQuery\n    query={query}\n    render={data => <PostsList data={data} {...props} />}\n  />\n);\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","import React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport { Link } from 'gatsby';\n\nimport { capitalizeWords } from 'src/utils/stringUtils';\n\nconst contentMap = {\n  post: ({ text }) => <span className=\"post-info-sm post-tag\">{text}</span>,\n  count: ({ count, text }) => <span>{`${text} (${count})`}</span>,\n  postList: ({ text }) => <span className=\"post-tag\">{text}</span>,\n};\n\nconst TagLink = ({ count, text, variant }) => {\n  const capText = capitalizeWords(text);\n  const contentFunc = contentMap[variant];\n\n  if (!contentFunc) {\n    throw new Error(`props.variant ${variant} not in contentMap.`);\n  }\n\n  return (\n    <Link to={`/tags/${kebabCase(text)}/`}>\n      {contentFunc({ count, text: capText })}\n    </Link>\n  );\n};\n\nexport default TagLink;\n","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n"],"sourceRoot":""}